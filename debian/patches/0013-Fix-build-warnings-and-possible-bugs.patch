From: Mathieu Mirmont <mat@parad0x.org>
Date: Thu, 8 Oct 2020 00:44:16 +0200
Subject: Fix minor build warnings

---
 common/scheduler/task.c      | 1 +
 enforcer/src/daemon/engine.c | 5 ++---
 libhsm/src/lib/libhsm.c      | 5 +++++
 signer/src/daemon/engine.c   | 3 +--
 4 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/common/scheduler/task.c b/common/scheduler/task.c
index 4dcf9e9..3325a25 100644
--- a/common/scheduler/task.c
+++ b/common/scheduler/task.c
@@ -39,6 +39,7 @@
 #include "status.h"
 #include "duration.h"
 #include "file.h"
+#include "util.h"
 #include "log.h"
 
 static const char* task_str = "task";
diff --git a/enforcer/src/daemon/engine.c b/enforcer/src/daemon/engine.c
index 379fd03..0571a5b 100644
--- a/enforcer/src/daemon/engine.c
+++ b/enforcer/src/daemon/engine.c
@@ -398,7 +398,7 @@ desetup_database(engine_type* engine)
     engine->dbcfg_list = NULL;
 }
 
-static void *
+static void
 signal_handler(sig_atomic_t sig)
 {
     switch (sig) {
@@ -422,7 +422,6 @@ signal_handler(sig_atomic_t sig)
         default:
             break;
     }
-    return NULL;
 }
 
 /**
@@ -453,7 +452,7 @@ engine_setup()
     }
 
     /* create command handler (before chowning socket file) */
-    engine->cmdhandler = cmdhandler_create(engine->config->clisock_filename, enforcercommands, engine, (void*(*)(void*)) (void(*)(void*))&get_database_connection, (void(*)(void*))&db_connection_free);
+    engine->cmdhandler = cmdhandler_create(engine->config->clisock_filename, enforcercommands, engine, (void*(*)(void*)) &get_database_connection, (void(*)(void*))&db_connection_free);
     if (!engine->cmdhandler) {
         ods_log_error("[%s] create command handler to %s failed",
             engine_str, engine->config->clisock_filename);
diff --git a/libhsm/src/lib/libhsm.c b/libhsm/src/lib/libhsm.c
index fedf32a..0d000cd 100644
--- a/libhsm/src/lib/libhsm.c
+++ b/libhsm/src/lib/libhsm.c
@@ -3431,6 +3431,11 @@ hsm_get_error(hsm_ctx_t *gctx)
             "%s: %s",
             ctx->error_action ? ctx->error_action : "unknown()",
             ctx->error_message[0] ? ctx->error_message : "unknown error");
+
+        /* Since both message and ctx->error_message have the same length, the
+         * snprintf statement above may be truncated. In this case the string
+         * won't be null-terminated. */
+        message[HSM_ERROR_MSGSIZE - 1U] = '\0';
         return message;
     };
 
diff --git a/signer/src/daemon/engine.c b/signer/src/daemon/engine.c
index a48a613..ff53b8c 100644
--- a/signer/src/daemon/engine.c
+++ b/signer/src/daemon/engine.c
@@ -298,7 +298,7 @@ engine_wakeup_workers(engine_type* engine)
     schedule_release_all(engine->taskq);
 }
 
-static void *
+static void
 signal_handler(sig_atomic_t sig)
 {
     switch (sig) {
@@ -322,7 +322,6 @@ signal_handler(sig_atomic_t sig)
         default:
             break;
     }
-    return NULL;
 }
 
 /**
